{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9616e852b56ab7e1e620fcb43f022c0553647f7b242f5bf4471c6bf0e1a54c51",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1034542",
    "logsBloom": "0x
    "blockHash": "0x643ba06c237b3cc8f655eba324e3a7b9d3d1204ca7b18bcaff133197a7bf56ed",
    "transactionHash": "0x9616e852b56ab7e1e620fcb43f022c0553647f7b242f5bf4471c6bf0e1a54c51",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1034542",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "810978689c14b56c15b0ae5074d8094f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Yash Khanvilkar\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library you can also add param and return field if applicable\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//1. Pragma\\npragma solidity ^0.8.7;\\n\\n//2. Import Statements\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//3.Error Codes\\nerror FundMe__NotOwner();\\n\\n//4. Interfaces or Libraries that are not imported in imports\\n\\n//5. Contracts\\n/** @title A contract for crowd funding\\n * @author Yash Khanvilkar\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    //1. Type declarations\\n    using PriceConverter for uint256;\\n\\n    //2. State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //3.Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    //4. functions-\\n    //4.a constructor\\n    //4.b receive\\n    //4.c fallback\\n    //4.d external\\n    //4.e public\\n    //4.f internal\\n    //4.g private\\n    //4.h view/pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n     * you can also add param and return field if applicable\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Call failed\\\");\\n    }\\n\\n    // View/Pure functions - getters\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x427ee1e99f561e62832935a4aaee023c05203da9f4cc84fffbcc7eb754fb7be1\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        // Goerli ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n        // or (Both will do the same thing)\\r\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // or (Both will do the same thing)\\r\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x921d399fc539db8165e2c0ccc96cedfb66b948f17574ab2376aecf11ede89e50\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012e0380380620012e08339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c61115a62000186600039600081816101e301528181610432015281816105bc01526107b2015261115a6000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461011d578063b60d428814610148578063be2693f014610152578063d7b4750c1461015c5761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100c7578063893d20e8146100f2575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610ab2565b610199565b6040516100b49190610ca8565b60405180910390f35b6100c56101e1565b005b3480156100d357600080fd5b506100dc610421565b6040516100e99190610ca8565b60405180910390f35b3480156100fe57600080fd5b5061010761042e565b6040516101149190610c32565b60405180910390f35b34801561012957600080fd5b50610132610456565b60405161013f9190610c4d565b60405180910390f35b610150610480565b005b61015a6105ba565b005b34801561016857600080fd5b50610183600480360381019061017e9190610adf565b61087e565b6040516101909190610c32565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610266576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103115760006001828154811061028c5761028b611010565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061030990610f69565b915050610269565b50600067ffffffffffffffff81111561032d5761032c61103f565b5b60405190808252806020026020018201604052801561035b5781602001602082028036833780820191505090505b50600190805190602001906103719291906109a2565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161039890610c1d565b60006040518083038185875af1925050503d80600081146103d5576040519150601f19603f3d011682016040523d82523d6000602084013e6103da565b606091505b505090508061041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590610c68565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104bf600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c690919063ffffffff16565b1015610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790610c88565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461054e9190610cdf565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610679575b5050505050905060005b815181101561074d5760008282815181106106eb576106ea611010565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074590610f69565b9150506106cd565b50600067ffffffffffffffff8111156107695761076861103f565b5b6040519080825280602002602001820160405280156107975781602001602082028036833780820191505090505b50600190805190602001906107ad9291906109a2565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107f490610c1d565b60006040518083038185875af1925050503d8060008114610831576040519150601f19603f3d011682016040523d82523d6000602084013e610836565b606091505b505090508061087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087190610c68565b60405180910390fd5b5050565b60006001828154811061089457610893611010565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108d283610902565b90506000670de0b6b3a764000085836108eb9190610e7d565b6108f59190610d35565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190610b0c565b5050509150506402540be4008161099a9190610d66565b915050919050565b828054828255906000526020600020908101928215610a1b579160200282015b82811115610a1a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c2565b5b509050610a289190610a2c565b5090565b5b80821115610a45576000816000905550600101610a2d565b5090565b600081359050610a58816110c8565b92915050565b600081519050610a6d816110df565b92915050565b600081359050610a82816110f6565b92915050565b600081519050610a97816110f6565b92915050565b600081519050610aac8161110d565b92915050565b600060208284031215610ac857610ac761106e565b5b6000610ad684828501610a49565b91505092915050565b600060208284031215610af557610af461106e565b5b6000610b0384828501610a73565b91505092915050565b600080600080600060a08688031215610b2857610b2761106e565b5b6000610b3688828901610a9d565b9550506020610b4788828901610a5e565b9450506040610b5888828901610a88565b9350506060610b6988828901610a88565b9250506080610b7a88828901610a9d565b9150509295509295909350565b610b9081610ed7565b82525050565b610b9f81610f33565b82525050565b6000610bb2600b83610cce565b9150610bbd82611073565b602082019050919050565b6000610bd5601b83610cce565b9150610be08261109c565b602082019050919050565b6000610bf8600083610cc3565b9150610c03826110c5565b600082019050919050565b610c1781610f13565b82525050565b6000610c2882610beb565b9150819050919050565b6000602082019050610c476000830184610b87565b92915050565b6000602082019050610c626000830184610b96565b92915050565b60006020820190508181036000830152610c8181610ba5565b9050919050565b60006020820190508181036000830152610ca181610bc8565b9050919050565b6000602082019050610cbd6000830184610c0e565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cea82610f13565b9150610cf583610f13565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d2a57610d29610fb2565b5b828201905092915050565b6000610d4082610f13565b9150610d4b83610f13565b925082610d5b57610d5a610fe1565b5b828204905092915050565b6000610d7182610ee9565b9150610d7c83610ee9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dbb57610dba610fb2565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610df857610df7610fb2565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e3557610e34610fb2565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e7257610e71610fb2565b5b828202905092915050565b6000610e8882610f13565b9150610e9383610f13565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ecc57610ecb610fb2565b5b828202905092915050565b6000610ee282610ef3565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f3e82610f45565b9050919050565b6000610f5082610f57565b9050919050565b6000610f6282610ef3565b9050919050565b6000610f7482610f13565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fa757610fa6610fb2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6110d181610ed7565b81146110dc57600080fd5b50565b6110e881610ee9565b81146110f357600080fd5b50565b6110ff81610f13565b811461110a57600080fd5b50565b61111681610f1d565b811461112157600080fd5b5056fea2646970667358221220d8a6e42576c3af817d40698fdd8a010695bc8067310a728a4c2458090edde66664736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461011d578063b60d428814610148578063be2693f014610152578063d7b4750c1461015c5761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100c7578063893d20e8146100f2575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610ab2565b610199565b6040516100b49190610ca8565b60405180910390f35b6100c56101e1565b005b3480156100d357600080fd5b506100dc610421565b6040516100e99190610ca8565b60405180910390f35b3480156100fe57600080fd5b5061010761042e565b6040516101149190610c32565b60405180910390f35b34801561012957600080fd5b50610132610456565b60405161013f9190610c4d565b60405180910390f35b610150610480565b005b61015a6105ba565b005b34801561016857600080fd5b50610183600480360381019061017e9190610adf565b61087e565b6040516101909190610c32565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610266576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103115760006001828154811061028c5761028b611010565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061030990610f69565b915050610269565b50600067ffffffffffffffff81111561032d5761032c61103f565b5b60405190808252806020026020018201604052801561035b5781602001602082028036833780820191505090505b50600190805190602001906103719291906109a2565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161039890610c1d565b60006040518083038185875af1925050503d80600081146103d5576040519150601f19603f3d011682016040523d82523d6000602084013e6103da565b606091505b505090508061041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590610c68565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104bf600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c690919063ffffffff16565b1015610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790610c88565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461054e9190610cdf565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610679575b5050505050905060005b815181101561074d5760008282815181106106eb576106ea611010565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074590610f69565b9150506106cd565b50600067ffffffffffffffff8111156107695761076861103f565b5b6040519080825280602002602001820160405280156107975781602001602082028036833780820191505090505b50600190805190602001906107ad9291906109a2565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107f490610c1d565b60006040518083038185875af1925050503d8060008114610831576040519150601f19603f3d011682016040523d82523d6000602084013e610836565b606091505b505090508061087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087190610c68565b60405180910390fd5b5050565b60006001828154811061089457610893611010565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108d283610902565b90506000670de0b6b3a764000085836108eb9190610e7d565b6108f59190610d35565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190610b0c565b5050509150506402540be4008161099a9190610d66565b915050919050565b828054828255906000526020600020908101928215610a1b579160200282015b82811115610a1a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c2565b5b509050610a289190610a2c565b5090565b5b80821115610a45576000816000905550600101610a2d565b5090565b600081359050610a58816110c8565b92915050565b600081519050610a6d816110df565b92915050565b600081359050610a82816110f6565b92915050565b600081519050610a97816110f6565b92915050565b600081519050610aac8161110d565b92915050565b600060208284031215610ac857610ac761106e565b5b6000610ad684828501610a49565b91505092915050565b600060208284031215610af557610af461106e565b5b6000610b0384828501610a73565b91505092915050565b600080600080600060a08688031215610b2857610b2761106e565b5b6000610b3688828901610a9d565b9550506020610b4788828901610a5e565b9450506040610b5888828901610a88565b9350506060610b6988828901610a88565b9250506080610b7a88828901610a9d565b9150509295509295909350565b610b9081610ed7565b82525050565b610b9f81610f33565b82525050565b6000610bb2600b83610cce565b9150610bbd82611073565b602082019050919050565b6000610bd5601b83610cce565b9150610be08261109c565b602082019050919050565b6000610bf8600083610cc3565b9150610c03826110c5565b600082019050919050565b610c1781610f13565b82525050565b6000610c2882610beb565b9150819050919050565b6000602082019050610c476000830184610b87565b92915050565b6000602082019050610c626000830184610b96565b92915050565b60006020820190508181036000830152610c8181610ba5565b9050919050565b60006020820190508181036000830152610ca181610bc8565b9050919050565b6000602082019050610cbd6000830184610c0e565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cea82610f13565b9150610cf583610f13565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d2a57610d29610fb2565b5b828201905092915050565b6000610d4082610f13565b9150610d4b83610f13565b925082610d5b57610d5a610fe1565b5b828204905092915050565b6000610d7182610ee9565b9150610d7c83610ee9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dbb57610dba610fb2565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610df857610df7610fb2565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e3557610e34610fb2565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e7257610e71610fb2565b5b828202905092915050565b6000610e8882610f13565b9150610e9383610f13565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ecc57610ecb610fb2565b5b828202905092915050565b6000610ee282610ef3565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f3e82610f45565b9050919050565b6000610f5082610f57565b9050919050565b6000610f6282610ef3565b9050919050565b6000610f7482610f13565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fa757610fa6610fb2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6110d181610ed7565b81146110dc57600080fd5b50565b6110e881610ee9565b81146110f357600080fd5b50565b6110ff81610f13565b811461110a57600080fd5b50565b61111681610f1d565b811461112157600080fd5b5056fea2646970667358221220d8a6e42576c3af817d40698fdd8a010695bc8067310a728a4c2458090edde66664736f6c63430008070033",
  "devdoc": {
    "author": "Yash Khanvilkar",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library you can also add param and return field if applicable"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}